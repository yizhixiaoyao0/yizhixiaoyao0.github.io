<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>深入理解浏览器中的进程与线程</title>
    <url>/2022/11/29/web-base-1-js/</url>
    <content><![CDATA[<p>进程和线程的联系和区别</p>
<span id="more"></span>
<h3 id="进程和线程的联系和区别"><a href="#进程和线程的联系和区别" class="headerlink" title="进程和线程的联系和区别"></a>进程和线程的联系和区别</h3><p>当我们启动某个程序时，操作系统会给该程序创建一块内存(当程序关闭时，该内存空间就会被回收)，用来存放代码、运行中的数据和一个执行任务的主线程，这样的一个运行环境就叫进程</p>
<p>而线程是依附于进程的，在进程中使用多线程并行处理能提升运算效率，进程将任务分成很多细小的任务，再创建多个线程，在里面并行分别执行</p>
<ul>
<li>进程和线程的关系特点是这样的：</li>
</ul>
<p>进程与进程之间完全隔离，互不干扰，一个进程崩溃不会影响其他进程，避免一个进程出错影响整个程序<br>进程与进程之间需要传递某些数据的话，就需要通过进程通信管道 IPC 来传递</p>
<ul>
<li>一个进程中可以并发多个线程，每个线程并行执行不同的任务</li>
<li>一个进程中的任意一个线程执行出错，会导致这个进程崩溃</li>
<li>同一进程下的线程之间可以直接通信和共享数据</li>
<li>当一个进程关闭之后，操作系统会回收该进程的内存空间</li>
</ul>
<h3 id="早期浏览器"><a href="#早期浏览器" class="headerlink" title="早期浏览器"></a>早期浏览器</h3><p>2007 年以前浏览器并不是多进程的结构，而是单进程的结构，一个进程中包含了网络、JS 运行环境、渲染引擎、页面、插件等，这也导致单进程的结构引发了很多问题</p>
<ul>
<li><ul>
<li>一是不稳定，其中一个线程卡死，可能会导致整个程序出问题，比如打开多个标签页，其中一个标签页卡死可能会导致整个浏览器无法正常运行</li>
</ul>
</li>
</ul>
<p>二是不安全，浏览器一个进程里是可以共享数据的，那 JS 线程岂不是可以随意访问浏览器进程内的所有数据，这显然不合理</p>
<ul>
<li>三是不流畅，一个进程需要负责太多事情，会导致运行效率问题</li>
</ul>
<p>所以为了解决这些问题，才发展出了多进程结构<br>我们来看一下目前最新的 Chrom 有进程架构</p>
<h3 id="Chrome-打开一个页面有多少进程？分别是哪些"><a href="#Chrome-打开一个页面有多少进程？分别是哪些" class="headerlink" title="Chrome 打开一个页面有多少进程？分别是哪些"></a>Chrome 打开一个页面有多少进程？分别是哪些</h3><p>浏览器从关闭到启动，然后新开一个页面至少需要：<strong>1 个浏览器进程</strong>，<strong>1 个 GPU 进程</strong>，<strong>1 个网络进程</strong>，和<strong>1 个渲染进程</strong>，一共 4 个进程；</p>
<p>后续如果再打开新的标签页：浏览器进程，GPU 进程，网络进程是共享的，不会重新启动，然后默认情况下会为每一个标签页配置一个渲染进程，但是也有例外，比如从 A 页面里面打开一个新的页面 B 页面，而 A 页面和 B 页面又属于同一站点的话，A 和 B 就共用一个渲染进程，其他情况就为 B 创建一个新的渲染进程</p>
<p>所以，最新的 Chrome 浏览器包括：1 个浏览器主进程，1 个 GPU 进程，1 个网络进程，多个渲染进程，和多个插件进程</p>
<p>浏览器进程： 负责控制浏览器除标签页外的界面，包括地址栏、书签、前进后退按钮等，以及负责与其他进程的协调工作，同时提供存储功能</p>
<ul>
<li>GPU 进程：负责整个浏览器界面的渲染。Chrome 刚开始发布的时候是没有 GPU 进程的，而使用 GPU 的初衷是为了实现 3D CSS 效果，只是后面网页、Chrome 的 UI 界面都用 GPU 来绘制，这使 GPU 成为浏览器普遍的需求，最后 Chrome 在多进程架构上也引入了 GPU 进程</li>
<li>网络进程：负责发起和接受网络请求，以前是作为模块运行在浏览器进程一时在面的，后面才独立出来，成为一个单独的进程</li>
<li>插件进程：主要是负责插件的运行，因为插件可能崩溃，所以需要通过插件进程来隔离，以保证插件崩溃也不会对浏览器和页面造成影响</li>
<li>渲染进程：负责控制显示 tab 标签页内的所有内容，核心任务是将 HTML、CSS、JS 转为用户可以与之交互的网页，排版引擎 Blink 和 JS 引擎 V8 都是运行在该进程中，默认情况下 Chrome 会为每个 Tab 标签页创建一个渲染进程</li>
</ul>
<p>我们平时看到的浏览器呈现出页面过程中，大部分工作都是在渲染进程中完成，所以我们来看一下渲染进程中的线程<br>渲染进程中的线程</p>
<ul>
<li>GUI 渲染线程：负责渲染页面，解析 html 和 CSS、构建 DOM 树、CSSOM 树、渲染树、和绘制页面，重绘重排也是在该线程执行</li>
<li>JS 引擎线程：一个 tab 页中只有一个 JS 引擎线程(单线程)，负责解析和执行 JS。它 GUI 渲染进程不能同时执行，只能一个一个来，如果 JS 执行过长就会导致阻塞掉帧</li>
<li>计时器线程：指 setInterval 和 setTimeout，因为 JS 引擎是单线程的，所以如果处于阻塞状态，那么计时器就会不准了，所以需要单独的线程来负责计时器工作<br>异步 http 请求线程： XMLHttpRequest 连接后浏览器开的一个线程，比如请求有回调函数，异步线程就会将回调函数加入事件队列，等待 JS 引擎空闲执行</li>
<li>事件触发线程：主要用来控制事件循环，比如 JS 执行遇到计时器，AJAX 异步请求等，就会将对应任务添加到事件触发线程中，在对应事件符合触发条件触发时，就把事件添加到待处理队列的队尾，等 JS 引擎处理</li>
</ul>
<h3 id="说下浏览器的进程、线程模型，线程模型中的每个线程都是干嘛用的？"><a href="#说下浏览器的进程、线程模型，线程模型中的每个线程都是干嘛用的？" class="headerlink" title="说下浏览器的进程、线程模型，线程模型中的每个线程都是干嘛用的？"></a>说下浏览器的进程、线程模型，线程模型中的每个线程都是干嘛用的？</h3><p>Chrome 为例，有四种进程模型，分别是</p>
<ul>
<li>Process-per-site-instance：默认模式。访问不同站点创建新的进程，在旧页面中打开的新页面，且新页面与旧页面属于同一站点的话会共用一个进程不会创建</li>
<li>Process-per-site：同一站点使用同一进程</li>
<li>Process-per-tab：每一个标签页都创建新的进程</li>
<li>Single Process：单进程模式</li>
</ul>
<h4 id="线程模型中的线程都是干嘛的呢？"><a href="#线程模型中的线程都是干嘛的呢？" class="headerlink" title="线程模型中的线程都是干嘛的呢？"></a>线程模型中的线程都是干嘛的呢？</h4><ul>
<li>MessagePumpForIO：处理进程间通信的线程，在 Chrome 中，这类线程都叫做 IO 线程</li>
<li>MessagePumpForUI：处理 UI 的线程用的</li>
<li>MessagePumpDefault：一般的线程用到的</li>
</ul>
<p>每一个 Chrome 的线程，入口函数都差不多，都是启动一个消息循环，等待并执行任务</p>
<h3 id="你知道哪些进程间通信的方式？"><a href="#你知道哪些进程间通信的方式？" class="headerlink" title="你知道哪些进程间通信的方式？"></a>你知道哪些进程间通信的方式？</h3><ul>
<li>管道通信：就是操作系统在内核中开辟一段缓冲区，进程 1 可以将需要交互的数据拷贝到这个缓冲区里，进程 2 就可以读取了</li>
<li>消息队列通信：消息队列就是用户可以添加和读取消息的列表，消息队列里提供了一种从一个进程向另一个进程发送数据块的方法，不过和管道通信一样每个数据块有最大长度限制</li>
<li>共享内存通信：就是映射一段能被其他进程访问的内存，由一个进程创建，但多个进程都可以访问，共享进程最快的是 IPC 方式</li>
<li>信号量通信：比如信号量初始值是 1，进程 1 来访问一块内存的时候，就把信号量设为 0，然后进程 2 也来访问的时候看到信号量为 0，就知道有其他进程在访问了，就不访问了</li>
<li>socket：其他的都是同一台主机之间的进程通信，而在不同主机的进程通信就要用到 socket 的通信方式了，比如发起 http 请求，服务器返回数据</li>
</ul>
<h3 id="多标签之间怎么通信？"><a href="#多标签之间怎么通信？" class="headerlink" title="多标签之间怎么通信？"></a>多标签之间怎么通信？</h3><p>没有办法直接通信，需要有一个类似中介者进行消息的转发和接收，比如</p>
<ul>
<li>localStorage：在一个标签页监听 localStorage 的变化，然后当另一个标签页修改的时候，可以通过监听获取新数据</li>
<li>WebSocket：因为 websocket 可以实现实时服务器推送，所以服务器就可以来当这个中介者。标签页通过向服务器发送数据，然后服务器再向其他标签推送转发</li>
<li>ShareWorker：会在页面的生命周期内创建一个唯一的线程，并开启多个页面也只会使用同一个线程，标签页共享一个线程</li>
<li>postMessage：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送方</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">parent</span>().<span class="title function_">pastMessage</span>(<span class="string">&quot;发送的数据&quot;</span>, <span class="string">&quot;http://接收的址&quot;</span>);</span><br><span class="line"><span class="comment">// 接收方</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> data = e.<span class="property">data</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="你知道僵尸进程和孤儿进程吗？"><a href="#你知道僵尸进程和孤儿进程吗？" class="headerlink" title="你知道僵尸进程和孤儿进程吗？"></a>你知道僵尸进程和孤儿进程吗？</h3><ul>
<li><p>孤儿进程：故名思义，就是没爹的孩子。父进程退出了，而它的一个或多个进程还在运行，那么这些子进程都会成为孤儿进程。这些孤儿都将被 init 进程收养，并负责这些孤儿的以后</p>
</li>
<li><p>僵尸进程：就是子进程比父进程先结束，而父进程又没有释放子进程占用的资源，那么子进程的描述还留在系统中，这种进程就是僵尸进程</p>
</li>
</ul>
<p>转载自：<a href="https://juejin.cn/post/6991849728493256741">https://juejin.cn/post/6991849728493256741</a><br>来源：稀土掘金</p>
]]></content>
      <categories>
        <category>浏览器</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>浏览器</tag>
        <tag>进程与线程</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机图形学基础01 - 向量与线性代数</title>
    <url>/2022/11/15/graphics0-1/</url>
    <content><![CDATA[<p>图形学依赖于线性代数、微积分、信号处理、数值分析等</p>
<span id="more"></span>
<h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><h3 id="图形学四大块：光栅化、几何、光线追踪、模拟-动画"><a href="#图形学四大块：光栅化、几何、光线追踪、模拟-动画" class="headerlink" title="图形学四大块：光栅化、几何、光线追踪、模拟/动画"></a>图形学四大块：光栅化、几何、光线追踪、模拟/动画</h3><p>光栅化可以简单理解成将三维空间的几何形体呈现在屏幕</p>
<p>光栅化（Rasterize）就是将一些矢量形状转换为位图（Raster Image）形式。 经过这样的变换后，这些形状才可以在屏幕上进行显示，也可以被打印机打印出来。 之所以需要这么做，是因为我们的屏幕其实可以被看做一个像素（Pixel）的点阵，程序通过设置每个像素点展示的颜色来展示整体的图像。</p>
<ul>
<li>应用：大部分实时计算机图形学会广泛应用到光栅化，所谓实时就是每秒钟生成30帧画面。</li>
</ul>
<h1 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h1><blockquote>
<p>表示一个方向和长度，平移位同一向量</p>
</blockquote>
<ul>
<li><p>向量相加： 平行四边形法则和三角形法则</p>
<p>$\overrightarrow{AB}$ = $\vec{A}$ + $\vec{B}$</p>
</li>
<li><p>向量相乘：</p>
</li>
</ul>
<ul>
<li><p>点乘： 可得到两个向量的夹角信息，可得到一个方向的大致信息，两个方向是否在一个方向，是否接近</p>
<p>$\vec{a}$ $\cdot$ $\vec{b}$ = ||$\vec{a}$||||$\vec{b}$||$\cos\theta$ </p>
</li>
<li><p>差积： 输入两个向量，得到一个新的向量垂直于这两个向量</p>
<blockquote>
<p>符合分配定律，使用右手螺旋定则可得到新向量；<br>差积可以告诉两个向量的左右关系,也可以判断一个点在某个图形内</p>
</blockquote>
<p>$\vec{a}$ $\times$ $\vec{b}$ = - $\vec{b}$ $\times$ $\vec{a}$</p>
<p>$\vec{a}$ $\times$ $\vec{a}$ = $\vec{0}$</p>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机图形学基础</category>
      </categories>
      <tags>
        <tag>计算机图形学基础</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题 —— 两个整数之和</title>
    <url>/2022/11/15/algorithm/</url>
    <content><![CDATA[<p>给你两个整数 a 和 b ，不使用 运算符 + 和 - ​​​​​​​，计算并返回两整数之和。</p>
<span id="more"></span>
<h3 id="给你两个整数-a-和-b-，不使用-运算符-和-​​​​​​​，计算并返回两整数之和。"><a href="#给你两个整数-a-和-b-，不使用-运算符-和-​​​​​​​，计算并返回两整数之和。" class="headerlink" title="给你两个整数 a 和 b ，不使用 运算符 + 和 - ​​​​​​​，计算并返回两整数之和。"></a>给你两个整数 a 和 b ，不使用 运算符 + 和 - ​​​​​​​，计算并返回两整数之和。</h3><ul>
<li>两个整数 a, b， a ^ b 是无进位的相加；</li>
<li>a&amp;b 得到每一位的进位；</li>
<li>无进位相加的结果与进位不断的异或，直到进位为 0；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> getSum = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> b ? <span class="title function_">getSum</span>(a ^ b, (a &amp; b) &lt;&lt; <span class="number">1</span>) : a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>算法与数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>开发实践问题记录</title>
    <url>/2022/02/17/q-22217/</url>
    <content><![CDATA[<p>关于 H5 开发遇到的问题</p>
<span id="more"></span>
<h1 id="1-关于-H5-微信平台内分享-转发不显示卡片问题"><a href="#1-关于-H5-微信平台内分享-转发不显示卡片问题" class="headerlink" title="1. 关于 H5 微信平台内分享/转发不显示卡片问题"></a>1. 关于 H5 微信平台内分享/转发不显示卡片问题</h1><p>全域名开放造成的，目前从下面三个入口进入还可以进行分享。</p>
<p>1.公众号菜单访问后分享</p>
<p>2.生成二维码，识别二维码后分享</p>
<p>3.访问页面后添加到收藏，从微信收藏中进入后分享</p>
<ol>
<li>app 内分享卡片后分享</li>
</ol>
<h1 id="2-关于-H5-微信平台内分享音频卡片"><a href="#2-关于-H5-微信平台内分享音频卡片" class="headerlink" title="2. 关于 H5 微信平台内分享音频卡片"></a>2. 关于 H5 微信平台内分享音频卡片</h1><p>微信官方开发文档中虽然有提及 H5 分享好友时候可以设置 type 为 music、video， 实践后并不可以，可能与 1 有类似原因，在开放社区未看到回复。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">onMenuShareAppMessage</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 分享标题</span></span><br><span class="line">  <span class="attr">desc</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 分享描述</span></span><br><span class="line">  <span class="attr">link</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line">  <span class="attr">imgUrl</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 分享图标</span></span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 分享类型,music、video或link，不填默认为link</span></span><br><span class="line">  <span class="attr">dataUrl</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 如果type是music或video，则要提供数据链接，默认为空</span></span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 用户点击了分享后执行的回调函数</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>移动端可以实现分享音视频， app 内嵌套 h5 可调用原生提供的分享方法。</p>
<h1 id="3-关于-H5-播放部分视频"><a href="#3-关于-H5-播放部分视频" class="headerlink" title="3. 关于 H5 播放部分视频"></a>3. 关于 H5 播放部分视频</h1><p>需求：由于视频剪辑工作量过大，是否可以前端来控制部分播放</p>
<p>事实上 web 端播放视屏需要实时下载，对于全量视屏链接只播放部分并不合理，很容易被扒。</p>
<p>初步考虑：</p>
<ul>
<li>还是由人工剪辑，返回部分链接</li>
<li>后端来直接从文件流截取实现获取部分片段然后上传，给到前端链接</li>
<li>后端提供一个链接，ffmpeg 在线转码用 nginx 推送给 web</li>
</ul>
<p>最后还是人工剪辑 hhhhh ～ 😊</p>
<h1 id="4-ios-端-H5-无法直接唤起-app"><a href="#4-ios-端-H5-无法直接唤起-app" class="headerlink" title="4. ios 端 H5 无法直接唤起 app"></a>4. ios 端 H5 无法直接唤起 app</h1><p>目前 H5 使用 <a href="https://www.jianshu.com/p/77b530f0c67b">deeplink</a>的唤醒方式</p>
<ul>
<li><p>网络波动有可能会导致部分用户第一次安装时，无法下载 apple-app-site-association 文件，这个只能引导用户删除重装或者在迭代时修改 Associated Domains 配置告诉系统重新下载 apple-app-site-association 文件。</p>
</li>
<li><p>另外一种可能是苹果抽风导致</p>
</li>
</ul>
]]></content>
      <categories>
        <category>H5</category>
      </categories>
      <tags>
        <tag>H5</tag>
        <tag>微信sdk</tag>
      </tags>
  </entry>
  <entry>
    <title>node事件循环</title>
    <url>/2022/02/10/node-base-2/</url>
    <content><![CDATA[<p>主线程是单线程执行的，但是 Node.js 存在多线程执行，多线程包括 setTimeout 和异步 I/O 事件。其实 Node.js 还存在其他的线程，包括垃圾回收、内存优化等。</p>
<span id="more"></span>
<div class="note blue fas fa-bullhorn modern">
            <p>转载至拉钩教育….</p>
          </div>
<h1 id="事件循环模型"><a href="#事件循环模型" class="headerlink" title="事件循环模型"></a>事件循环模型</h1><div class="img-wrap"><div class="img-bg"><img class="img" src="/images/libuv.jpeg" style="width:80%;"/></div></div>
<p>可以看到，这一流程包含六个阶段，每个阶段代表如下：</p>
<ul>
<li><p>timers:<br>本阶段执行已经被 setTimeout() 和 setInterval() 调度的回调函数，简单理解就是由这两个函数启动的回调函数。</p>
</li>
<li><p>pending callbacks：<br>本阶段执行某些系统操作（如 TCP 错误类型）的回调函数。</p>
</li>
<li><p>idle、prepare：<br>仅系统内部使用，你只需要知道有这 2 个阶段就可以。</p>
</li>
<li><p>poll：<br>检索新的 I/O 事件，执行与 I/O 相关的回调，其他情况 Node.js 将在适当的时候在此阻塞。这也是最复杂的一个阶段，所有的事件循环以及回调处理都在这个阶段执行，接下来会详细分析这个过程。</p>
</li>
<li><p>check：<br>setImmediate() 回调函数在这里执行，setImmediate 并不是立马执行，而是当事件循环 poll 中没有新的事件处理时就执行该部分，</p>
</li>
</ul>
<h1 id="运行起点"><a href="#运行起点" class="headerlink" title="运行起点"></a>运行起点</h1><p>从图 1 中我们可以看出事件循环的起点是 timers。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>在代码 setTimeout 中的回调函数就是新一轮事件循环的起点，那么为什么先输出 2 后输出 1？</p>
<p>这里有一个非常关键点，当 Node.js 启动后，会初始化事件循环，处理已提供的输入脚本，它可能会先调用一些异步的 API、调度定时器，或者 process.nextTick()，然后再开始处理事件循环。因此可以这样理解，Node.js 进程启动后，就发起了一个新的事件循环，也就是事件循环的起点。</p>
<h1 id="Node-js-事件循环"><a href="#Node-js-事件循环" class="headerlink" title="Node.js 事件循环"></a>Node.js 事件循环</h1><p>事件循环主要包括微任务和宏任务。</p>
<ul>
<li><p><strong>微任务</strong>：在 Node.js 中微任务包含 2 种——process.nextTick 和 Promise。微任务在事件循环中优先级是最高的，因此在同一个事件循环中有其他任务存在时，优先执行微任务队列。并且 process.nextTick 和 Promise 也存在优先级，process.nextTick 高于 Promise。</p>
</li>
<li><p><strong>宏任务</strong>：在 Node.js 中宏任务包含 4 种——setTimeout、setInterval、setImmediate 和 I/O。宏任务在微任务执行之后执行，因此在同一个事件循环周期内，如果既存在微任务队列又存在宏任务队列，那么优先将微任务队列清空，再执行宏任务队列。这也解释了我们前面提到的第 3 个问题，事件循环中的事件类型是存在优先级。</p>
</li>
</ul>
<h2 id="执行阶段主要处理三个核心逻辑。"><a href="#执行阶段主要处理三个核心逻辑。" class="headerlink" title="执行阶段主要处理三个核心逻辑。"></a>执行阶段主要处理三个核心逻辑。</h2><ul>
<li><p>同步代码。</p>
</li>
<li><p>将异步任务插入到微任务队列或者宏任务队列中。</p>
</li>
<li><p>执行微任务或者宏任务的回调函数。在主线程处理回调函数的同时，也需要判断是否插入微任务和宏任务。根据优先级，先判断微任务队列是否存在任务，存在则先执行微任务，不存在则判断在宏任务队列是否有任务，有则执行。</p>
</li>
</ul>
<p>如果微任务和宏任务都只有一层时，那么看起来是比较简单的，比如下面的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次事件循环执行</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 将会在新的事件循环中的阶段执行</span></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;./test.conf&quot;</span>, &#123; <span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span> &#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;read file success&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 新的事件循环的起点</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 该部分将会在首次事件循环中执行</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Promise callback&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 执行 process.nextTick</span></span><br><span class="line"></span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;nextTick callback&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次事件循环执行</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;end&quot;</span>);</span><br></pre></td></tr></table></figure>
<ol>
<li><p>根据上面介绍的执行过程，我们来分析下上面代码的执行过程：</p>
</li>
<li><p>第一个事件循环主线程发起，因此先执行同步代码，所以先输出 start，然后输出 end；</p>
</li>
<li><p>再从上往下分析，遇到微任务，插入微任务队列，遇到宏任务，插入宏任务队列，分析完成后，微任务队列包含：Promise.resolve 和 process.nextTick，宏任务队列包含：fs.readFile 和 setTimeout；</p>
</li>
<li><p>先执行微任务队列，但是根据优先级，先执行 process.nextTick 再执行 Promise.resolve，所以先输出 nextTick callback 再输出 Promise callback；</p>
</li>
</ol>
<p>再执行宏任务队列，根据宏任务插入先后顺序执行 setTimeout 再执行 fs.readFile，这里需要注意，先执行 setTimeout 由于其回调时间较短，因此回调也先执行，并非是 setTimeout 先执行所以才先执行回调函数，但是它执行需要时间肯定大于 1ms，所以虽然 fs.readFile 先于 setTimeout 执行，但是 setTimeout 执行更快，所以先输出 setTimeout ，最后输出 read file success。</p>
<p>可以得到:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start</span><br><span class="line">end</span><br><span class="line">nextTick callback</span><br><span class="line">Promise callback</span><br><span class="line">setTimeout</span><br><span class="line">read file success</span><br></pre></td></tr></table></figure>
<p>但是当微任务和宏任务又产生新的微任务和宏任务时，又应该如何处理呢？如下代码所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 新的事件循环的起点</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">&quot;./config/test.conf&quot;</span>, &#123; <span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span> &#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;read file sync success&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 回调将会在新的事件循环之前</span></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;./config/test.conf&quot;</span>, &#123; <span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span> &#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;read file success&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 该部分将会在首次事件循环中执行</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;poll callback&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次事件循环执行</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>在上面代码中，有 2 个宏任务和 1 个微任务，宏任务是 setTimeout 和 fs.readFile，微任务是 Promise.resolve。</p>
<ol>
<li><p>整个过程优先执行主线程的第一个事件循环过程，所以先执行同步逻辑，先输出 2。</p>
</li>
<li><p>接下来执行微任务，输出 poll callback。</p>
</li>
<li><p>再执行宏任务中的 fs.readFile 和 setTimeout，由于 fs.readFile 优先级高，先执行 fs.readFile。但是处理时间长于 1ms，因此会先执行 setTimeout 的回调函数，输出 1。这个阶段在执行过程中又会产生新的宏任务 fs.readFile，因此又将该 fs.readFile 插入宏任务队列。</p>
</li>
<li><p>最后由于只剩下宏任务了 fs.readFile，因此执行该宏任务，并等待处理完成后的回调，输出 read file sync success。</p>
</li>
</ol>
<p>根据上面的分析，我们可以得出最后的执行结果，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">poll callback</span><br><span class="line">1</span><br><span class="line">read file success</span><br><span class="line">read file sync success</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在上面的例子中，我们来思考一个问题，主线程是否会被阻塞，具体我们来看一个代码例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 新的事件循环的起点</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">  <span class="title function_">sleep</span>(<span class="number">10000</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sleep 10s&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="comment">/// 将会在 poll 阶段执行</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;./test.conf&quot;</span>, &#123; <span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span> &#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;read file success&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="comment">/// 函数实现，参数 n 单位 毫秒 ；</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() - start &gt; n) &#123;</span><br><span class="line">      <span class="comment">// 使用  break  实现；</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们在 setTimeout 中增加了一个阻塞逻辑，这个阻塞逻辑的现象是，只有等待当次事件循环结束后，才会执行 fs.readFile 回调函数。这里会发现 fs.readFile 其实已经处理完了，并且通知回调到了主线程，但是由于主线程在处理回调时被阻塞了，导致无法处理 fs.readFile 的回调。因此可以得出一个结论，主线程会因为回调函数的执行而被阻塞，这也符合图 2 中的执行流程图。</p>
<p>如果把上面代码中 setTimeout 的时间修改为 10 ms，你将会优先看到 fs.readFile 的回调函数，因为 fs.readFile 执行完成了，并且还未启动下一个事件循环，修改的代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 新的事件循环的起点</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">  <span class="title function_">sleep</span>(<span class="number">10000</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sleep 10s&quot;</span>);</span><br><span class="line">&#125;, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>最后我们再来回答第 5 个问题，当所有的微任务和宏任务都清空的时候，虽然当前没有任务可执行了，但是也并不能代表循环结束了。因为可能存在当前还未回调的异步 I/O，所以这个循环是没有终点的，只要进程在，并且有新的任务存在，就会去执行。</p>
<h1 id="实践分析"><a href="#实践分析" class="headerlink" title="实践分析"></a>实践分析</h1><p>了解了整个原理流程，我们再来实践验证下 Node.js 的事件驱动，以及 I/O 到底有什么效果和为什么能提高并发处理能力。我们的实验分别从同步和异步的代码性能分析对比，从而得出两者的差异。</p>
<p>Node.js 不善于处理 CPU 密集型的业务，就会导致性能问题，如果要实现一个耗时 CPU 的计算逻辑，处理方法有 2 种：</p>
<p>直接在主业务流程中处理；</p>
<p>通过网络异步 I/O 给其他进程处理。</p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>自用node基础篇-1</title>
    <url>/2022/02/10/node-base-1/</url>
    <content><![CDATA[<p>测试博客，test</p>
<span id="more"></span>
<h1 id="1-nodejs-可以做什么？"><a href="#1-nodejs-可以做什么？" class="headerlink" title="1 nodejs 可以做什么？"></a>1 nodejs 可以做什么？</h1><ul>
<li>轻量级、高性能的web服务</li>
<li>前后端js同构开发</li>
<li>便捷高效的前端工程化</li>
</ul>
<h1 id="2-nodejs架构"><a href="#2-nodejs架构" class="headerlink" title="2 nodejs架构"></a>2 nodejs架构</h1><ul>
<li><p>natives modules</p>
<ul>
<li>当前曾内容由js实现</li>
<li>提供应用程序可直接调用库， 例如fs、 path等</li>
<li>js语言无法直接操作底层硬件设置</li>
</ul>
</li>
<li><p>builtin module 胶水层： 让node核心模块获得支持</p>
</li>
<li><p>v8、lib<br> v8： 执行js代码、 提供桥梁接口<br> libuv: 事件循环、事件队列、异步io；<br> 第三方库</p>
</li>
</ul>
<h1 id="3-nodejs单线程：主线撑是单线程"><a href="#3-nodejs单线程：主线撑是单线程" class="headerlink" title="3 nodejs单线程：主线撑是单线程"></a>3 nodejs单线程：主线撑是单线程</h1><h1 id="4-nodejs核心模块以及api使用"><a href="#4-nodejs核心模块以及api使用" class="headerlink" title="4 nodejs核心模块以及api使用"></a>4 nodejs核心模块以及api使用</h1><h1 id="5-nodejs演化"><a href="#5-nodejs演化" class="headerlink" title="5 nodejs演化"></a>5 nodejs演化</h1><p>io是计算机操作过程中最缓慢的</p>
<p>reactor模式，单线程完成多线程工作，实现异步io、事件驱动</p>
<p>nodejs更适合密集型高并发请求</p>
<h1 id="6-node异步io和事件驱动"><a href="#6-node异步io和事件驱动" class="headerlink" title="6 node异步io和事件驱动"></a>6 node异步io和事件驱动</h1><p>  <strong>非阻塞io/阻塞io</strong></p>
<p>  重复调用io操作、判断io是否结束。 （read、select、poll、)</p>
<p>  期望实现无须主动判断的非阻塞io：</p>
<p>  异步io</p>
<ul>
<li>io是应用程序的瓶颈所在</li>
<li><p>异步io提高性能、不在原地等待结果返回</p>
</li>
<li><p>io操作属于操作系统级别， 平台都有对应的实现</p>
</li>
<li><p>nodejs单线程配合事件驱动架构以及libuv实现了异步io</p>
<p><strong>事件驱动</strong></p>
<blockquote>
<p>事件驱动架构是软件开发中的通用模式</p>
</blockquote>
<p>主体发布消息， 其他实例接收消息。</p>
</li>
</ul>
<h1 id="7-单线程实现高并发"><a href="#7-单线程实现高并发" class="headerlink" title="7 单线程实现高并发"></a>7 单线程实现高并发</h1><blockquote>
<p>nodejs 异步非阻塞io配合事件回调通知， 主线程是单线程。</p>
</blockquote>
<p>劣势；cpu密集型会过多占用， 无法体现多核cpu的优势</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sleepTime</span>(<span class="params">time</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> sleep = <span class="title class_">Date</span>.<span class="title function_">now</span>() + time * <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() &lt; sleep) &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sleepTime</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;server starting.....&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;starting&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="8-nodejs-应用场景"><a href="#8-nodejs-应用场景" class="headerlink" title="8 nodejs 应用场景"></a>8 nodejs 应用场景</h1><ol>
<li><p>io密集型高并发请求</p>
</li>
<li><p>操作数据库提供api服务</p>
</li>
<li><p>实时聊天应用程序</p>
</li>
</ol>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
</search>
